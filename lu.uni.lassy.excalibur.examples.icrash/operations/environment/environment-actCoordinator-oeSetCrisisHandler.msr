package icrash.operations.environment.actCoordinator.oeSetCrisisHandler {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.concepts.secondarytypes.datatypes
import icrash.environment

Operation Model {

operation: actCoordinator.outactCoordinator.oeSetCrisisHandler(AdtCrisisID:dtCrisisID):ptBoolean{
	preP{
  let TheSystem: ctState in
  let TheActor:actCoordinator in
  
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
  
/* PreP01 */
  and TheSystem.vpStarted = true
/* PreP02 */
  and TheActor.rnctAuthenticated.vpIsLogged = true
  
  }
  preF{
  let TheSystem: ctState in
  let TheActor:actCoordinator in
   
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PreF01 */
  TheSystem.rnctCrisis->select(id.eq(AdtCrisisID))
  = ColctCrisis
  and ColctCrisis->size().eq(1)
  
/*PreF02 */ 
  TheActor.rnctCoordinator.xp.ge(ColctCrisis->any(true).crisistype)
  }

postF{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PostF01 */

  TheSystem.rnctCrisis->select(id.eq(AdtCrisisID))
  = ColctCrisis
  and ThectCrisis.coordinatorgrade = AdtGrade
  }
 postP{true}
		}
}
}