package icrash.environment.operations.actAdministrator.outactAdministrator.oeEvaluateCoordinator {

import lu.uni.lassy.messir.libraries.primitives

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actAdministrator.outactAdministrator.oeEvaluateCoordinator(AdtCoordinatorID:dtCoordinatorID, AetExperience:etExperience):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)

preP{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
  
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
  
/* PreP01 */
  and TheSystem.vpStarted = true
/* PreP02 */
  and TheActor.rnctAuthenticated.vpIsLogged = true
  
  }
  preF{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
   
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PreF01 */
  TheSystem.rnctCoordinator->select(id.eq(AdtCoordinatorID))
  = ColctCoordinators
  and ColctCoordinators->size().eq(1)
}

postF{
  let TheSystem: ctState in
  let TheActor:actAdministrator in
  self.rnActor.rnSystem = TheSystem
  and self.rnActor = TheActor
/* PostF01 */
  TheSystem.rnctCoordinator->select(id.eq(AdtCoordinatorID))
  = ThectCoordinator
  and ThectCoordinator.ex = AetExperience
  }
 postP{true}
  }
}
}

